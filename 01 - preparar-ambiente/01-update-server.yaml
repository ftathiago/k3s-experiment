---
- name: Update SO
  hosts: all
  become: yes
  gather_facts: no  
  tasks:
    - name: Update node apt
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 3600
        autoclean: yes
        autoremove: yes
    - name: Check if a reboot is needed
      register: reboot_required_file
      stat:
        path: /var/run/reboot-required
        get_md5: no
    - name: Reboot if needed
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible for kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists      

- name: Install packages
  hosts: all 
  become: yes
  gather_facts: yes
  tasks:
    - name: Install vim
      ansible.builtin.apt:
        pkg:
          - vim
    - name: Install curl
      ansible.builtin.apt:
        pkg:
          - curl
    - name: Install nmap
      ansible.builtin.apt:
        pkg:
          - nmap
    - name: Install iptables
      ansible.builtin.apt:
        name: iptables
        state: present

    - name: Install key
      ansible.builtin.apt:
        pkg:        
          - apt-transport-https
          - ca-certificates

    - name: Install Firewall
      ansible.builtin.apt:
        pkg:
          - wireguard
    - name: Add disk nfs-common
      ansible.builtin.apt:
        name: nfs-common
        state: present
  
    - name: Add disk open-iscsi
      ansible.builtin.apt:
        name: open-iscsi
        state: present
  
    - name: Add disk linux-utils
      ansible.builtin.apt:
        name: util-linux
        state: present

    - name: Populate service facts
      service_facts:
    - debug:
        msg: "{{ ansible_facts.services['httpd.service'] }}"
      when: ansible_facts.services['httpd.service'] is defined

    - debug:
        msg: "{{ ansible_facts.services['apache2.service'] }}"
      when: ansible_facts.services['apache2.service'] is defined

    - name: "Stop apache service"
      tags: stop_apache
      service: 
        name: apache2.service
        state: stopped
      when: ansible_facts.services['apache2.service'] is defined and ansible_facts.services['apache2.service'].state != 'stopped'

    - name: "Stop httpd service"
      tags: stop_apache
      service: 
        name: httpd
        state: stopped
      when: ansible_facts.services['httpd.service'] is defined

    - name: Remove Apache server from Ubuntu server.
      apt:
        name: apache2
        state: absent
        update_cache: yes
    
    - name: Remove unwanted Apache2 packages from the system.
      apt:
        autoremove: yes
        purge: yes        

    - name: Activating cgroup support
      lineinfile:
        path: /boot/cmdline.txt
        regexp: '^((?!.*\bcgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory\b).*)$'
        line: '\1 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory'
        backrefs: true

    - name: Reboot if needed
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible for kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
